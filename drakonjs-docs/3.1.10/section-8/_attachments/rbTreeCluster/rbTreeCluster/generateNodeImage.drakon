{
    "type": "drakon",
    "items": {
        "1": {
            "type": "end"
        },
        "2": {
            "type": "branch",
            "branchId": 1,
            "one": "3",
            "content": "Preparation data"
        },
        "3": {
            "type": "action",
            "one": "4",
            "content": "P = x.parent"
        },
        "4": {
            "type": "action",
            "one": "5",
            "content": "G = P ? P.parent: null"
        },
        "5": {
            "type": "action",
            "one": "6",
            "content": "U = getUncle(tree, x)"
        },
        "6": {
            "type": "question",
            "one": "7",
            "two": "8",
            "flag1": 1,
            "content": "!P || !G"
        },
        "7": {
            "type": "action",
            "one": "8",
            "content": "return ''"
        },
        "8": {
            "type": "action",
            "one": "10",
            "content": "isUncleRed = (\n    U !== tree.nullNode && U.colour === true\n)"
        },
        "9": {
            "type": "branch",
            "one": "1",
            "branchId": 3,
            "content": "Exit"
        },
        "10": {
            "type": "branch",
            "one": "13",
            "branchId": 2,
            "content": "Formation of a tree-cluster image"
        },
        "13": {
            "type": "question",
            "one": "29",
            "two": "28",
            "flag1": 0,
            "content": "isUncleRed"
        },
        "28": {
            "type": "action",
            "one": "9",
            "content": "return 'CASE_A'"
        },
        "29": {
            "type": "action",
            "one": "30",
            "two": "",
            "content": "p_segment = 'P:R'"
        },
        "30": {
            "type": "action",
            "one": "37",
            "two": "",
            "content": "p_segment += P === G.left ? ',P<-G': ',P->G'"
        },
        "31": {
            "type": "action",
            "one": "32",
            "two": "",
            "content": "imageParts.push(p_segment)"
        },
        "32": {
            "type": "action",
            "one": "33",
            "two": "",
            "content": "imageParts.push('U:B')"
        },
        "33": {
            "type": "action",
            "one": "34",
            "two": "",
            "content": "x_segment = 'x:R'"
        },
        "34": {
            "type": "action",
            "one": "35",
            "two": "",
            "content": "x_segment += x === P.left ? ',x<-P': ',x->P'"
        },
        "35": {
            "type": "action",
            "one": "36",
            "two": "",
            "content": "imageParts.push(x_segment)"
        },
        "36": {
            "type": "action",
            "one": "9",
            "two": "",
            "content": "return imageParts.join('; ')"
        },
        "37": {
            "type": "action",
            "one": "31",
            "content": "imageParts = [];"
        }
    },
    "keywords": {
        "function": true,
        "machine": false,
        "async": false,
        "export": false,
        "algoprop": false,
        "lazy": false
    },
    "params": "tree, x"
}