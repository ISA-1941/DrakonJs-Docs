{
    "type": "drakon",
    "items": {
        "1": {
            "type": "end"
        },
        "2": {
            "type": "branch",
            "branchId": 1,
            "one": "7",
            "content": "Tree building"
        },
        "3": {
            "type": "action",
            "one": "6",
            "content": "values = [\n    11,\n    5,\n    2,\n    17,\n    15,\n    1,\n    8,\n    6,\n    19,\n    13,\n    21\n];"
        },
        "5": {
            "type": "loopend",
            "one": "9",
            "content": ""
        },
        "6": {
            "type": "loopbegin",
            "one": "8",
            "content": "val; values"
        },
        "7": {
            "type": "action",
            "one": "3",
            "content": "tree = createBstTree()"
        },
        "8": {
            "type": "action",
            "one": "5",
            "content": "insertNode(tree, val)"
        },
        "9": {
            "type": "action",
            "one": "14",
            "content": "console.log(tree)"
        },
        "13": {
            "type": "branch",
            "one": "29",
            "branchId": 3,
            "content": "Basic tree functions"
        },
        "14": {
            "type": "branch",
            "one": "26",
            "branchId": 2,
            "content": "Types of tree node traversal"
        },
        "15": {
            "type": "action",
            "one": "16",
            "content": "postOrder(tree.root, result)"
        },
        "16": {
            "type": "action",
            "one": "13",
            "content": "// console.log(\"postOrder:\", result)\n"
        },
        "22": {
            "type": "action",
            "one": "28",
            "two": "",
            "content": "console.log(\"inOrder:\", result)"
        },
        "23": {
            "type": "action",
            "one": "22",
            "two": "",
            "content": "inOrder(tree.root, result)"
        },
        "24": {
            "type": "action",
            "one": "25",
            "two": "",
            "content": "preOrder(tree.root, result)"
        },
        "25": {
            "type": "action",
            "one": "27",
            "two": "",
            "content": "// console.log(\"preOrder:\", result)\n"
        },
        "26": {
            "type": "action",
            "one": "24",
            "content": "result = []"
        },
        "27": {
            "type": "action",
            "one": "23",
            "content": "result = []"
        },
        "28": {
            "type": "action",
            "one": "15",
            "content": "result = []"
        },
        "29": {
            "type": "action",
            "one": "30",
            "content": "found = findNode(tree.root, 13)"
        },
        "30": {
            "type": "question",
            "one": "31",
            "two": "32",
            "flag1": 1,
            "content": "found"
        },
        "31": {
            "type": "action",
            "one": "33",
            "content": "console.log(\"Found:\", found.value)"
        },
        "32": {
            "type": "action",
            "one": "33",
            "content": "console.log(\"Not found\")"
        },
        "33": {
            "type": "action",
            "one": "34",
            "content": "tree.root = removeNode(tree.root, 8)"
        },
        "34": {
            "type": "action",
            "one": "35",
            "two": "",
            "content": "found = findNode(tree.root, 8)"
        },
        "35": {
            "type": "question",
            "one": "36",
            "two": "37",
            "flag1": 1,
            "content": "found"
        },
        "36": {
            "type": "action",
            "one": "1",
            "two": "",
            "content": "console.log(\"Found:\", found.value)"
        },
        "37": {
            "type": "action",
            "one": "1",
            "two": "",
            "content": "console.log(\"Not found\")"
        }
    }
}